public class ComputeGradeActivity extends AppCompatActivity implements View.OnClickListener, View.OnTouchListener, AdapterView.OnItemLongClickListener{

    Button btQuiz,btSw, btHw, btLA,btExam,btLE, btSubmit, btChoose;


    private EditText etQuiz,etQuiz2, etSw,etSw2, etHw,etHw2, etLA,etLA2, etRec;
    private EditText etPrelim,etFinals;

    private EditText etLE, etLE2, etProject, etExam,etExamOver;

    private ArrayAdapter<String> adapterQuiz,adapterSw,adapterHw,adapterLA,adapterExam,adapterLE;

    private Spinner spinner,spPassing;

    ListView lvQuiz, lvSw, lvHw, lvLA, lvExam, lvLE;
    Button btHideQuiz, btHideSw, btHideHw, btHideLA, btHideExam, btHideLE;

    private LinearLayout layoutQuiz,layoutSw,layoutHw,layoutLA,layoutOverall, layoutExam, layoutLE;

    EditText etScore = null, etOver= null;
    ArrayAdapter<String> arr = null;

    DBHelper mydb;

    double[] gradingSys;

    String subjName;

    double overallHw = 0, overallSw = 0, overallLA = 0, overallQuiz = 0, overallExam=0, overallLE=0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_compute_grade);

        setToolbar();

        mydb = new DBHelper(this);
        ArrayList array_list = mydb.getAllGrades();
        ArrayAdapter arrayAdapter=new ArrayAdapter(this,android.R.layout.simple_spinner_item, array_list);
        arrayAdapter.add("Overall Grade");

        spinner = (Spinner)findViewById(R.id.spinner);
        spinner.setAdapter(arrayAdapter);

        lvQuiz = (ListView)findViewById(R.id.lvQuiz);
        lvSw = (ListView)findViewById(R.id.lvSw);
        lvHw = (ListView)findViewById(R.id.lvHw);
        lvLA = (ListView)findViewById(R.id.lvLA);
        lvExam = (ListView)findViewById(R.id.lvExam);
        lvLE = (ListView)findViewById(R.id.lvLE);

        adapterQuiz = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
        adapterSw = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
        adapterHw = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
        adapterLA = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
        adapterExam = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
        adapterLE = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);

        btQuiz = (Button)findViewById(R.id.btQuiz);
        btSw = (Button)findViewById(R.id.btSw);
        btHw = (Button)findViewById(R.id.btHw);
        btLA = (Button)findViewById(R.id.btLA);
        btExam = (Button)findViewById(R.id.btExam);
        btLE = (Button)findViewById(R.id.btLE);

        btSubmit = (Button)findViewById(R.id.btSubmit);
        btChoose = (Button)findViewById(R.id.btChoose);

        etQuiz = (EditText) findViewById(R.id.etQuiz);
        etQuiz2 = (EditText) findViewById(R.id.etQuiz2);

        etSw = (EditText)findViewById(R.id.etSw);
        etSw2 = (EditText)findViewById(R.id.etSw2);

        etHw = (EditText)findViewById(R.id.etHw);
        etHw2 = (EditText)findViewById(R.id.etHw2);

        etLA = (EditText)findViewById(R.id.etLA);
        etLA2 = (EditText)findViewById(R.id.etLA2);

        etRec = (EditText)findViewById(R.id.etRecitation);

        layoutQuiz = (LinearLayout)findViewById(R.id.layoutQuiz);
        layoutSw = (LinearLayout)findViewById(R.id.layoutSw);
        layoutHw = (LinearLayout)findViewById(R.id.layoutHw);
        layoutLA = (LinearLayout)findViewById(R.id.layoutLA);
        layoutExam = (LinearLayout)findViewById(R.id.layoutExam);
        layoutLE= (LinearLayout)findViewById(R.id.layoutLE);

        etExam = (EditText)findViewById(R.id.etExam);
        etExamOver = (EditText)findViewById(R.id.etExamOver);



        etProject = (EditText)findViewById(R.id.etProject);
        etLE = (EditText)findViewById(R.id.etLE);
        etLE2 = (EditText)findViewById(R.id.etLE2);

        lvQuiz.setAdapter(adapterQuiz);
        lvSw.setAdapter(adapterSw);
        lvHw.setAdapter(adapterHw);
        lvLA.setAdapter(adapterLA);
        lvExam.setAdapter(adapterExam);
        lvLE.setAdapter(adapterLE);

        lvQuiz.setVisibility(View.GONE);
        lvSw.setVisibility(View.GONE);
        lvHw.setVisibility(View.GONE);
        lvLA.setVisibility(View.GONE);
        lvExam.setVisibility(View.GONE);
        lvLE.setVisibility(View.GONE);

        btQuiz.setOnClickListener(this);
        btSw.setOnClickListener(this);
        btHw.setOnClickListener(this);
        btLA.setOnClickListener(this);
        btExam.setOnClickListener(this);
        btLE.setOnClickListener(this);

        btSubmit.setOnClickListener(this);
        btChoose.setOnClickListener(this);

        lvQuiz.setOnTouchListener(this);
        lvSw.setOnTouchListener(this);
        lvHw.setOnTouchListener(this);
        lvLA.setOnTouchListener(this);
        lvExam.setOnTouchListener(this);
        lvLE.setOnTouchListener(this);

        lvQuiz.setOnItemLongClickListener(this);
        lvSw.setOnItemLongClickListener(this);
        lvHw.setOnItemLongClickListener(this);
        lvLA.setOnItemLongClickListener(this);
        lvExam.setOnItemLongClickListener(this);
        lvLE.setOnItemLongClickListener(this);

        layoutQuiz.setVisibility(View.GONE);
        layoutSw.setVisibility(View.GONE);
        layoutHw.setVisibility(View.GONE);
        layoutLA.setVisibility(View.GONE);
        layoutExam.setVisibility(View.GONE);
        layoutLE.setVisibility(View.GONE);


        etProject.setVisibility(View.GONE);
        etRec.setVisibility(View.GONE);

        btSubmit.setVisibility(View.GONE);

        //For overall computation
        etPrelim = (EditText)findViewById(R.id.etPrelim);
        etFinals = (EditText)findViewById(R.id.etFinals);
        spPassing = (Spinner)findViewById(R.id.spPassing);
        layoutOverall = (LinearLayout)findViewById(R.id.layoutOverall);


        etPrelim.setVisibility(View.GONE);
        etFinals.setVisibility(View.GONE);
        layoutOverall.setVisibility(View.GONE);

        ArrayAdapter passing=new ArrayAdapter(this,android.R.layout.simple_spinner_item);
        passing.add("50");passing.add("60");passing.add("70");passing.add("80");
        spPassing.setAdapter(passing);

        btHideHw = (Button)findViewById(R.id.btHideHw);
        btHideLA = (Button)findViewById(R.id.btHideLA);
        btHideQuiz = (Button)findViewById(R.id.btHideQuiz);
        btHideSw = (Button)findViewById(R.id.btHideSw);
        btHideExam= (Button)findViewById(R.id.btHideExam);
        btHideLE = (Button)findViewById(R.id.btHideLE);

        btHideHw.setOnClickListener(this);
        btHideLA.setOnClickListener(this);
        btHideQuiz.setOnClickListener(this);
        btHideSw.setOnClickListener(this);
        btHideExam.setOnClickListener(this);
        btHideLE.setOnClickListener(this);






    }

    @Override
    public void onClick(View v) {

        switch (v.getId()){
            case R.id.btQuiz:
                etScore = etQuiz;
                etOver = etQuiz2;
                arr = adapterQuiz;
                addDataList("quiz");
                break;
            case R.id.btSw:
                etScore = etSw;
                etOver = etSw2;
                arr = adapterSw;
                addDataList("sw");
                break;
            case R.id.btHw:
                etScore = etHw;
                etOver = etHw2;
                arr = adapterHw;
                addDataList("hw");
                break;
            case R.id.btLA:
                etScore = etLA;
                etOver = etLA2;
                arr = adapterLA;
                addDataList("la");
                break;
            case R.id.btExam:
                etScore = etExam;
                etOver = etExamOver;
                arr = adapterExam;
                addDataList("exam");
                break;
            case R.id.btLE:
                etScore = etLE;
                etOver = etLE2;
                arr = adapterLE;
                addDataList("le");
                break;
            case R.id.btSubmit:
                if(spinner.getSelectedItem().toString().equals("Overall Grade")){

                    overall();
                }else{
                    gradingSys = Utility.copyFromIntArray(mydb.getGrade(spinner.getSelectedItem().toString()));
                    compute();
                }

                break;
            case R.id.btChoose:
                try {
                    String selectedItem = spinner.getSelectedItem().toString();
                   if(selectedItem.equals("Overall Grade")){
                       show(0);


                   }else{
                       ArrayList<GradeRecordsModel> arr_records = mydb.getGradeRecords(selectedItem);
                       gradingSys = Utility.copyFromIntArray(mydb.getGrade(selectedItem));
                       subjName = selectedItem;
                       distributeGrades(arr_records);
                       show(1);
                   }
                    btSubmit.setVisibility(View.VISIBLE);


                }
               catch (NullPointerException e){
                   Toast.makeText(this, "Please Create a Grading System First", Toast.LENGTH_SHORT).show();
               }
                break;
            case R.id.btHideHw:

                if(lvHw.getVisibility()==View.GONE) {
                    lvHw.setVisibility(View.VISIBLE);
                    btHideHw.setCompoundDrawablesWithIntrinsicBounds(R.drawable.dropdown, 0, 0, 0);
                } else {
                    lvHw.setVisibility(View.GONE);
                    btHideHw.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_greater, 0, 0, 0);
                }
                break;
            case R.id.btHideLA:
                if(lvLA.getVisibility()==View.GONE) {
                    lvLA.setVisibility(View.VISIBLE);
                    btHideLA.setCompoundDrawablesWithIntrinsicBounds(R.drawable.dropdown, 0, 0, 0);
                }else {
                    lvLA.setVisibility(View.GONE);
                    btHideLA.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_greater, 0, 0, 0);
                }
                break;
            case R.id.btHideQuiz:
                if(lvQuiz.getVisibility()==View.GONE) {
                    lvQuiz.setVisibility(View.VISIBLE);
                    btHideQuiz.setCompoundDrawablesWithIntrinsicBounds(R.drawable.dropdown, 0, 0, 0);
                }else {
                    lvQuiz.setVisibility(View.GONE);
                    btHideQuiz.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_greater, 0, 0, 0);
                }
                break;
            case R.id.btHideSw:
                if(lvSw.getVisibility()==View.GONE) {
                    lvSw.setVisibility(View.VISIBLE);
                    btHideSw.setCompoundDrawablesWithIntrinsicBounds(R.drawable.dropdown, 0, 0, 0);
                }else {
                    lvSw.setVisibility(View.GONE);
                    btHideSw.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_greater, 0, 0, 0);
                }
                break;
            case R.id.btHideExam:
                if(lvExam.getVisibility()==View.GONE) {
                    lvExam.setVisibility(View.VISIBLE);
                    btHideExam.setCompoundDrawablesWithIntrinsicBounds(R.drawable.dropdown, 0, 0, 0);
                }else {
                    lvExam.setVisibility(View.GONE);
                    btHideExam.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_greater, 0, 0, 0);
                }
                break;
            case R.id.btHideLE:
                if(lvLE.getVisibility()==View.GONE) {
                    lvLE.setVisibility(View.VISIBLE);
                    btHideLE.setCompoundDrawablesWithIntrinsicBounds(R.drawable.dropdown, 0, 0, 0);
                }else {
                    lvLE.setVisibility(View.GONE);
                    btHideLE.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_greater, 0, 0, 0);
                }
                break;

        }


    }

    @Override
    public boolean onTouch(View v, MotionEvent event) {

        //v.getParent().requestDisallowInterceptTouchEvent(true);
        return false;
    }



    @Override
    public boolean onItemLongClick(AdapterView<?> parent, View view, final int position, long id) {

        final ArrayAdapter<Integer> arr = (ArrayAdapter<Integer>)parent.getAdapter();
        arr.remove(position);

        arr.notifyDataSetChanged();
        String data = (String)parent.getItemAtPosition(position);
        Toast.makeText(this, data, Toast.LENGTH_SHORT).show();
        return true;
    }

    public void addDataList(String category){
        String data;
        try {
            if(!etScore.getText().toString().equals("") && !etOver.getText().toString().equals(""))
                if(Double.parseDouble(etScore.getText().toString()) <= Double.parseDouble(etOver.getText().toString())) {
                    data = etScore.getText().toString() + "/" + etOver.getText().toString();
                    arr.add(data);
                    arr.notifyDataSetChanged();
                    etScore.setText("");
                    etOver.setText("");
                    etScore.requestFocus();

                    if(mydb.insertGradeRecord(subjName,category,data)){
                        Toast.makeText(this, "Record inserted", Toast.LENGTH_SHORT).show();
                    }

                }else {
                    Toast.makeText(this, "Wrong Values", Toast.LENGTH_SHORT).show();
                }
            else{
                Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
            }

            listViewAdjust();

        }
        catch (Exception ex){
            Toast.makeText(this, "Something went wrong" + ex.toString(), Toast.LENGTH_SHORT).show();
        }
    }

    public void addDataEntry(String category,String score){
        mydb.insertGradeRecord(subjName,category,score);
    }

    public void compute(){

        double myGrades[] = {0,0,0,0,0,0,0,0};

        Intent mIntent = new Intent(this,ResultActivity.class);


        ArrayList<Double> quiz_score = new ArrayList<>();
        ArrayList<Double> quiz_over = new ArrayList<>();

        ArrayList<Double> sw_score = new ArrayList<>();
        ArrayList<Double> sw_over = new ArrayList<>();

        ArrayList<Double> hw_score = new ArrayList<>();
        ArrayList<Double> hw_over = new ArrayList<>();

        ArrayList<Double> la_score = new ArrayList<>();
        ArrayList<Double> la_over = new ArrayList<>();

        ArrayList<Double> exam_score = new ArrayList<>();
        ArrayList<Double> exam_over = new ArrayList<>();

        ArrayList<Double> le_score = new ArrayList<>();
        ArrayList<Double> le_over = new ArrayList<>();


        if(!adapterQuiz.isEmpty()){
            for(int i=0 ; i<adapterQuiz.getCount() ; i++){
                String x[] = adapterQuiz.getItem(i).split("/");
                quiz_score.add(Double.parseDouble(x[0]));
                quiz_over.add(Double.parseDouble(x[1]));

            }
        }
        if(!adapterSw.isEmpty()){
            for(int i=0 ; i<adapterSw.getCount() ; i++){
                String x[] = adapterSw.getItem(i).split("/");
                sw_score.add(Double.parseDouble(x[0]));
                sw_over.add(Double.parseDouble(x[1]));
            }
        }
        if(!adapterHw.isEmpty()){
            for(int i=0 ; i<adapterHw.getCount() ; i++){
                String x[] = adapterHw.getItem(i).split("/");
                hw_score.add(Double.parseDouble(x[0]));
                hw_over.add(Double.parseDouble(x[1]));
            }
        }
        if(!adapterLA.isEmpty()){
            for(int i=0 ; i<adapterLA.getCount() ; i++){
                String x[] = adapterLA.getItem(i).split("/");
                la_score.add(Double.parseDouble(x[0]));
                la_over.add(Double.parseDouble(x[1]));
            }
        }

        if(!adapterExam.isEmpty()){
            for(int i=0 ; i<adapterExam.getCount() ; i++){
                String x[] = adapterExam.getItem(i).split("/");
                exam_score.add(Double.parseDouble(x[0]));
                exam_over.add(Double.parseDouble(x[1]));
            }
        }

        if(!adapterLE.isEmpty()){
            for(int i=0 ; i<adapterLE.getCount() ; i++){
                String x[] = adapterLE.getItem(i).split("/");
                le_score.add(Double.parseDouble(x[0]));
                le_over.add(Double.parseDouble(x[1]));
            }
        }



        try {

            double myQuizScore = Utility.sum(quiz_score);
            double myQuizOver = Utility.sum(quiz_over);

            double mySwScore = Utility.sum(sw_score);
            double mySwOver = Utility.sum(sw_over);

            double myHwScore = Utility.sum(hw_score);
            double myHwOver = Utility.sum(hw_over);

            double myLAScore = Utility.sum(la_score);
            double myLAOver = Utility.sum(la_over);

            double myExamScore = Utility.sum(exam_score);
            double myExamOver = Utility.sum(exam_over);

            double myLEScore = Utility.sum(le_score);
            double myLEOver = Utility.sum(le_over);


            //exam
            if(myExamOver>0){
                overallExam = (myExamScore/myExamOver) * 100;
                overallExam *= (gradingSys[0]/100);
                myGrades[0] = overallExam;
            }


            if(myQuizOver > 0){
                overallQuiz = (myQuizScore / myQuizOver) * 100;
                overallQuiz *= (gradingSys[1]/100);
                myGrades[1] = overallQuiz;
            }

            if(mySwOver > 0){
                overallSw = (mySwScore / mySwOver) * 100;
                overallSw *= (gradingSys[2]/100);
                myGrades[2] = overallSw;
            }

            if(myHwOver > 0){
                overallHw = (myHwScore / myHwOver) * 100;
                overallHw *= (gradingSys[3]/100);
                myGrades[3] = overallHw;
            }




            if(!etProject.getText().toString().equals("")){
                double project = Double.parseDouble(etProject.getText().toString()) * (gradingSys[4]/100);
                myGrades[4] = project;
            }

            if(!etRec.getText().toString().equals("")){
                double recitation = Double.parseDouble(etRec.getText().toString()) * (gradingSys[5]/100);
                myGrades[5] = recitation;
            }

            if(myLAOver > 0){
                overallLA = (myLAScore / myLAOver) * 100;
                overallLA *= (gradingSys[6]/100);
                myGrades[6] = overallLA;
            }

            if(myLEOver>0){
                overallLE = (myLEScore/myLEOver) * 100;
                overallLE *= (gradingSys[7]/100);
                myGrades[7] = overallLE;
            }

            mIntent.putExtra("myGrades",myGrades);
            mIntent.putExtra("subject", spinner.getSelectedItem().toString());

            startActivity(mIntent);






        }
        catch(Exception ex){
            Toast.makeText(this, ex.toString(), Toast.LENGTH_SHORT).show();
            ex.printStackTrace();
        }


    }
    

    public void show(int x){
        View et[] = {layoutExam,layoutQuiz,layoutSw,layoutHw,etProject,etRec,layoutLA,layoutLE};
        if(x==0){
            for (View anEt : et) {
                anEt.setVisibility(View.GONE);
            }
            etPrelim.setVisibility(View.VISIBLE);
            etFinals.setVisibility(View.VISIBLE);
            layoutOverall.setVisibility(View.VISIBLE);

        }
        else if(x==1){
            for(int i=0; i<et.length; i++){
                if(gradingSys[i] >0){

                    et[i].setVisibility(View.VISIBLE);
                }else{
                    et[i].setVisibility(View.GONE);
                }
            }
            etPrelim.setVisibility(View.GONE);
            etFinals.setVisibility(View.GONE);
            layoutOverall.setVisibility(View.GONE);

        }




    }

    void overall(){
        Intent mIntent = new Intent(this,ResultActivity.class);
        double myGrades[]  = {0,0,0,0};
        double prelim = Double.parseDouble(etPrelim.getText().toString());
        double finals = Double.parseDouble(etFinals.getText().toString());
        if(prelim>0 && prelim<=100 && finals>0 && finals<=100){
            myGrades[0] = prelim;
            myGrades[1] = finals;
            myGrades[2] = (prelim+finals)/2;
            myGrades[3] = Double.parseDouble(spPassing.getSelectedItem().toString());

            mIntent.putExtra("myGrades",myGrades);
            startActivity(mIntent);
        }else{
            Toast.makeText(this, "Prelim and Finals must be over 100", Toast.LENGTH_SHORT).show();
        }
    }

    private void distributeGrades(ArrayList<GradeRecordsModel> arr){



        for(GradeRecordsModel gModel : arr){
            switch (gModel.getCategory()){

                case "hw":
                    adapterHw.add(gModel.getRecord());
                    adapterHw.notifyDataSetChanged();
                    break;
                case "sw":
                    adapterSw.add(gModel.getRecord());
                    adapterSw.notifyDataSetChanged();
                    break;
                case "quiz":
                    adapterQuiz.add(gModel.getRecord());
                    adapterQuiz.notifyDataSetChanged();
                    break;
                case "la":
                    adapterLA.add(gModel.getRecord());
                    adapterLA.notifyDataSetChanged();
                    break;
                case "exam":
                    adapterExam.add(gModel.getRecord());
                    adapterExam.notifyDataSetChanged();
                    break;
                case "le":
                    adapterLE.add(gModel.getRecord());
                    adapterLE.notifyDataSetChanged();
                    break;
                case "recitation":
                    etRec.setText(gModel.getRecord());
                    break;
                case "project":
                    etProject.setText(gModel.getRecord());
                    break;
            }
        }

        listViewAdjust();




    }

    private void listViewAdjust(){
        ViewGroup.LayoutParams height_quiz = lvQuiz.getLayoutParams();
        height_quiz.height = lvQuiz.getCount()*100;
        lvQuiz.setLayoutParams(height_quiz);

        ViewGroup.LayoutParams heigt_hw = lvHw.getLayoutParams();
        heigt_hw.height = lvHw.getCount()*100;
        lvHw.setLayoutParams(heigt_hw);

        ViewGroup.LayoutParams height_sw = lvSw.getLayoutParams();
        height_sw.height = lvSw.getCount()*100;
        lvSw.setLayoutParams(height_sw);

        ViewGroup.LayoutParams height_la = lvLA.getLayoutParams();
        height_la.height = lvLA.getCount()*100;
        lvLA.setLayoutParams(height_la);

        ViewGroup.LayoutParams height_exam = lvExam.getLayoutParams();
        height_exam.height = lvExam.getCount()*100;
        lvExam.setLayoutParams(height_exam);

        ViewGroup.LayoutParams height_le = lvLE.getLayoutParams();
        height_le.height = lvLE.getCount()*100;
        lvLE.setLayoutParams(height_le);

    }

    @Override
    protected void onPause(){

        if(!etRec.getText().toString().equals("")){
            String recGrade = etRec.getText().toString();
            if(Double.parseDouble(recGrade)<=100) {
                addDataEntry("recitation", etRec.getText().toString());
            }
        }
        if(!etProject.getText().toString().equals("")){
            String projGrade = etProject.getText().toString();
            if(Double.parseDouble(projGrade)<=100) {
                addDataEntry("project", etProject.getText().toString());
            }
        }

        super.onPause();
    }

    private void setToolbar() {
        Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);

        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });
        getSupportActionBar().setTitle("Compute Grade");
        toolbar.setTitleTextColor(Color.WHITE);
        toolbar.setSubtitleTextColor(Color.WHITE);
    }
}